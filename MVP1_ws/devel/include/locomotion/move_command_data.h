// Generated by gencpp from file locomotion/move_command_data.msg
// DO NOT EDIT!


#ifndef LOCOMOTION_MESSAGE_MOVE_COMMAND_DATA_H
#define LOCOMOTION_MESSAGE_MOVE_COMMAND_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace locomotion
{
template <class ContainerAllocator>
struct move_command_data_
{
  typedef move_command_data_<ContainerAllocator> Type;

  move_command_data_()
    : leg_id(0)
    , move_type(0)
    , message()  {
    }
  move_command_data_(const ContainerAllocator& _alloc)
    : leg_id(0)
    , move_type(0)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef uint64_t _leg_id_type;
  _leg_id_type leg_id;

   typedef uint64_t _move_type_type;
  _move_type_type move_type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;





  typedef boost::shared_ptr< ::locomotion::move_command_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::locomotion::move_command_data_<ContainerAllocator> const> ConstPtr;

}; // struct move_command_data_

typedef ::locomotion::move_command_data_<std::allocator<void> > move_command_data;

typedef boost::shared_ptr< ::locomotion::move_command_data > move_command_dataPtr;
typedef boost::shared_ptr< ::locomotion::move_command_data const> move_command_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::locomotion::move_command_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::locomotion::move_command_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::locomotion::move_command_data_<ContainerAllocator1> & lhs, const ::locomotion::move_command_data_<ContainerAllocator2> & rhs)
{
  return lhs.leg_id == rhs.leg_id &&
    lhs.move_type == rhs.move_type &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::locomotion::move_command_data_<ContainerAllocator1> & lhs, const ::locomotion::move_command_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace locomotion

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::locomotion::move_command_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::locomotion::move_command_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::locomotion::move_command_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::locomotion::move_command_data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::locomotion::move_command_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::locomotion::move_command_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::locomotion::move_command_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b0bd287301f565ec7d127c2da0f8c738";
  }

  static const char* value(const ::locomotion::move_command_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb0bd287301f565ecULL;
  static const uint64_t static_value2 = 0x7d127c2da0f8c738ULL;
};

template<class ContainerAllocator>
struct DataType< ::locomotion::move_command_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "locomotion/move_command_data";
  }

  static const char* value(const ::locomotion::move_command_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::locomotion::move_command_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 leg_id\n"
"uint64 move_type\n"
"string message\n"
"\n"
;
  }

  static const char* value(const ::locomotion::move_command_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::locomotion::move_command_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.leg_id);
      stream.next(m.move_type);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct move_command_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::locomotion::move_command_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::locomotion::move_command_data_<ContainerAllocator>& v)
  {
    s << indent << "leg_id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.leg_id);
    s << indent << "move_type: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.move_type);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCOMOTION_MESSAGE_MOVE_COMMAND_DATA_H
